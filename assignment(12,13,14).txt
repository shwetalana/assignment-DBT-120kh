
                                                                    ASSIGNMENT-12
                                                             



(1)Write a query that selects all customers whose ratings are equal to or greater than ANY of Serres’
->SELECT *FROM customers WHERE rating >=ANY( SELECT rating FROM customers WHERE snum IN( SELECT snum FROM salespeople WHERE sname='serres' ) );


(2) Write a query using ANY or ALL that will find all salespeople who have no customers located in their city.  
 ->SELECT snum FROM salespeople WHERE (snum, city) NOT IN (SELECT snum,city FROM customers);


(3)Write a query that selects all orders for amounts greater than any for the customers in London.  
 
->SELECT * FROM orders WHERE amt> ANY( SELECT amt FROM orders WHERE cnum IN( SELECT cnum FROM customers WHERE city='london' ) );


(4)Write the above query using MIN or MAX
->SELECT * FROM orders WHERE amt>(SELECT min(amt) FROM customers NATURAL JOIN orders WHERE city='london');



                                                                   ASSIGNMENT-13

(1)Create a union of two queries that shows the names, cities, and ratings of all customers. Those with rating of 200 or greater will also have the words “High Rating”, while the others will have the words “Low Rating”.  
->SELECT cname,city,'HIGH RATING' RATING FROM customers WHERE rating>200 UNION SELECT cname,city,'LOW RATING' RATING FROM customers WHERE rating <=200;


(2) Write a command that produces the name and number of each salesperson and each customer with more than one current order. Put the results in alphabetical order.
->SELECT sname,snum,cname FROM salespeople JOIN customers using(snum)WHERE snum IN(SELECT snum FROM customers GROUP BY snumHAVING count(snum)>1)ORDER BY sname,cname;
 
(3)Form a union of three queries. Have the first select the snums of all salespeople in San Jose; the second, the cnums of all customers in San Jose; and the third the onums of all orders on October 3. Retain duplicates between the last two queries but eliminate any redundancies between either of them and the first.   (Note: in the sample tables as given, there would be no such redundancy. This is besides the point.)
->SELECT snum FROM salespeople WHERE city='san jose' UNION SELECT DISTINCT snum FROM orders WHERE snum IN(SELECT snum FROM orders WHERE odate LIKE '03-OCT-%');

                                 
                                                                ASSIGNMENT-14
(1) Write a command that puts the following values, in their given order, into the salespeople table: city – San Jose, name – Blanco, comm – NULL, cnum – 1100.
->INSERT INTO salespeople (city,sname,comm,snum) VALUES('San Jose','Blanco',NULL,1100);

(2)Write a command that removes all orders from customer Clemens from the Orders table.  
-> DELETE FROM orders WHERE cnum IN(SELECT cnum FROM customers HERE cname='Clemens');
 
 
(3)Write a command that increases the rating of all customers in Rome by 100.  
->


(4)Salesperson Serres has left the company. Assign her customers to Motika. 
->UPDATE customers SET snum= (SELECT snum FROM salespeople WHERE sname='serres')WHERE snum =(SELECT snumFROM salespeople WHERE sname='Motika');
